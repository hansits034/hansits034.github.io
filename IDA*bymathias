#include <bits/stdc++.h>

using namespace std;

struct State {
    int value;
    int distance;
    vector<int> nums;
    string expr;

    bool operator<(const State& other) const {
        return distance + abs(value - 24) < other.distance + abs(other.value - 24);
    }
};

vector<int> a(4);

bool ok = 0;
int iterations = 0;

void solve(int limit) {
    if (ok) return;
    priority_queue<State> pq;
    for (int i = 0; i < 4; i++) {
        pq.push({a[i], 1, {i}, to_string(a[i])});
    }

    while (!pq.empty()) {
        State cur = pq.top();
        pq.pop();
        iterations++;
        if (cur.value == 24) {
            cout << "Yes with the limit of " << limit << ": \n" << cur.expr << "\n";
            ok = 1;
            return;
        }
        if (limit == cur.distance) continue;
        for (int i = 0; i < 4; i++) {
            if (find(cur.nums.begin(), cur.nums.end(), i) == cur.nums.end()) {
                vector<int> new_nums = cur.nums;
                new_nums.push_back(i);

                pq.push({cur.value + a[i], cur.distance + 1, new_nums, cur.expr + "+" + to_string(a[i])});
                pq.push({cur.value - a[i], cur.distance + 1, new_nums, cur.expr + "-" + to_string(a[i])});
                pq.push({cur.value * a[i], cur.distance + 1, new_nums, cur.expr + "*" + to_string(a[i])});
                if (a[i] != 0) {
                    pq.push({cur.value / a[i], cur.distance + 1, new_nums, cur.expr + "/" + to_string(a[i])});
                }
            }
        }
    }
    cout << "No solution found.\n";
}

int main() {
    cin.tie(0)->sync_with_stdio(false);
    for (int i = 0; i < 4; i++) cin >> a[i];
    for (int i=1;i<=4;i++) {
        solve(i);
    }
    cout << "\nIterations: " << iterations;
    return 0;
}
